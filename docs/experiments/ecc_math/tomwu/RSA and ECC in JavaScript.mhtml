From: <Saved by Blink>
Snapshot-Content-Location: http://www-cs-students.stanford.edu/~tjw/jsbn/
Subject: RSA and ECC in JavaScript
Date: Sun, 23 Jun 2018 19:33:18 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--Nyj5WoGFhexWctucWmd8K33NCU2AEQXWEtKl860din----"


------MultipartBoundary--Nyj5WoGFhexWctucWmd8K33NCU2AEQXWEtKl860din----
Content-Type: text/html
Content-ID: <frame-73B30E321574FEF13F82BD7BF02B8CB6@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www-cs-students.stanford.edu/~tjw/jsbn/

<!DOCTYPE html PUBLIC "-//IETF//DTD HTML//EN"><html><head><meta http-equiv=
=3D"Content-Type" content=3D"text/html; charset=3DUTF-8">
    <title>RSA and ECC in JavaScript</title>
  </head>

  <body>
    <h1>RSA and ECC in JavaScript</h1>

The <code>jsbn</code> library is a fast, portable implementation of
large-number math in pure JavaScript, enabling public-key crypto
and other applications on desktop and mobile browsers.

<h2>Demos</h2>

<ul>
<li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/rsa.html">RSA =
Encryption Demo</a> - simple RSA encryption of a string with a public key
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/rsa2.html=
">RSA Cryptography Demo</a> - more complete demo of RSA encryption, decrypt=
ion, and key generation
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/ecdh.html=
">ECDH Key Agreement Demo</a> - Diffie-Hellman key agreement using elliptic=
 curves
<!-- <li><a href=3D"bb1.html">IBE BB1 Demo</a> - Boneh-Boyen (BB1) Identity=
-Based Encryption -->
</li></ul>

<h2>Source Code</h2>

The API for the <code>jsbn</code> library closely resembles that of the
<a href=3D"http://java.sun.com/j2se/1.3/docs/api/java/math/BigInteger.html"=
><code>java.math.BigInteger</code></a> class in Java.
For example:
<pre>  x =3D new BigInteger("abcd1234", 16);
  y =3D new BigInteger("beef", 16);
  z =3D x.mod(y);
  alert(z.toString(16));
</pre>
will print <code>b60c</code>.

<h3>Core Library</h3>
<ul>
<li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn.js"><code=
>jsbn.js</code></a> - basic BigInteger implementation, just enough for RSA =
encryption and not much more.
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn2.js"=
><code>jsbn2.js</code></a> - the rest of the library, including most public=
 <code>BigInteger</code> methods.
</li></ul>
<h3>RSA</h3>
<ul>
<li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/rsa.js"><code>=
rsa.js</code></a> - implementation of RSA encryption, does not require <cod=
e>jsbn2.js</code>.
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/rsa2.js">=
<code>rsa2.js</code></a> - rest of RSA algorithm, including decryption and =
keygen.
</li></ul>
<h3>ECC</h3>
<ul>
<li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/ec.js"><code>e=
c.js</code></a> - elliptic curve math, depends on both <code>jsbn.js</code>=
 and <code>jsbn2.js</code>
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/sec.js"><=
code>sec.js</code></a> - standard elliptic curve parameters
<!-- <li><a href=3D"bb1.js"><code>bb1.js</code></a> - BB1 IBE utility funct=
ions, depends on <code>ec.js</code> and <code>sha1.js</code> -->
</li></ul>
<h3>Utilities</h3>
<ul>
<li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/rng.js"><code>=
rng.js</code></a> - rudimentary entropy collector and RNG interface, requir=
es a PRNG backend to define <code>prng_newstate()</code>.
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/prng4.js"=
><code>prng4.js</code></a> - ARC4-based PRNG backend for <code>rng.js</code=
>, very small.
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/base64.js=
"><code>base64.js</code></a> - Base64 encoding and decoding routines.
</li><li><a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/sha1.js">=
<code>sha1.js</code></a> - SHA-1 hash function, only needed for IBE demo.
</li></ul>

<h2>Interoperability</h2>

The demo encrypts strings directly using PKCS#1 encryption-style
padding (type 2), which is currently the only supported format.
To show interoperability with a potential OpenSSL-based backend
that decrypts strings, try the following on any system with the
OpenSSL command line tool installed:

<ol>
<li>Generate a new public/private keypair:
<pre>$ openssl genrsa -out key.pem
Generating RSA private key, 512 bit long modulus
..++++++++++++
..............++++++++++++
e is 65537 (0x10001)
$
</pre>
</li><li>Extract the modulus from your key:
<pre>$ openssl rsa -in key.pem -noout -modulus
Modulus=3DDA3BB4C40E3C7E76F7DBDD8BF3DF0714CA39D3A0F7F9D7C2E4FEDF8C7B28C2875=
F7EB98950B22AE82D539C1ABC1AB550BA0B2D52E3EF7BDFB78A5E817D74BBDB
$
</pre>
</li><li>Go to the <a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn=
/rsa.html">RSA Encryption demo</a> and paste the modulus value into the "Mo=
dulus (hex)" field at the bottom.
</li><li>Make sure the value in the "Public exponent" field is "10001",
or whatever value your public key uses.
</li><li>Type in a short string (e.g. <code>testing</code>) into the "Plain=
text (string)" field and click on "encrypt".
The result should appear in the "Ciphertext" fields.
</li><li>Copy the base64 version of the ciphertext and paste it as the inpu=
t of
the following command:
<pre>$ openssl base64 -d | openssl rsautl -inkey key.pem -decrypt
1JW24UMKntVhmmDilAYC1AjLxgiWHBzTzZsCVAejLjVri92abLHkSyLisVyAdYVr
fiS7FchtI9vupe9JF/m3Kg=3D=3D
</pre>
Hit ctrl-D or whatever your OS uses for end-of-file.
Your original plaintext should appear:
<pre>testing$
</pre>
</li></ol>

<h2>Performance</h2>

The <a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/speed.html">sp=
eed tables</a> contain detailed
timing information for <code>jsbn</code> performing public-key
operations such as RSA, ECC, and IBE.

<h2>Projects that use jsbn</h2>

<ul>
<li><a href=3D"https://github.com/digitalbazaar/forge">Forge</a> - a pure J=
avaScript implementation of SSL/TLS, includes a discussion of their <a href=
=3D"http://digitalbazaar.com/2010/07/20/javascript-tls-2/">choice of BigInt=
eger library</a>
</li><li><a href=3D"http://www.dojotoolkit.org/">Dojo Toolkit</a> uses jsbn=
 in their <a href=3D"http://bugs.dojotoolkit.org/browser/dojox/trunk/math/B=
igInteger-ext.js">dojox.math.BigInteger class</a>.
</li><li><a href=3D"http://nomorecleartextpasswords.com/">No More Cleartext=
 Passwords</a> - this project switched from another JavaScript BigInteger l=
ibrary for <a href=3D"http://nomorecleartextpasswords.com/2009/03/big-integ=
er-javascript-library-changed/">performance reasons</a>
</li><li>Google's <a href=3D"http://v8.googlecode.com/svn/data/benchmarks/v=
6/run.html">V8 benchmark suite, version 6</a>
</li><li><a href=3D"http://ats.oka.nu/titaniumcore/js/crypto/readme.txt">Ja=
vaScript Cryptography Toolkit</a>
</li><li><a href=3D"http://www9.atwiki.jp/kurushima/pub/jsrsa/">RSA-Sign Ja=
vaScript library</a>
</li><li><a href=3D"https://ziyan.info/2008/10/javascript-rsa/">JavaScript =
RSA</a>
</li></ul>

<h2>History</h2>

<dl>
<dt><b>Version 1.4 (7/1/2013):</b></dt>
<dd>Fixed variable name collision between sha1.js and base64.js.
</dd><dd>Obtain entropy from window.crypto.getRandomValues where available.
</dd><dd>Added ECCurveFp.encodePointHex.
</dd><dd>Fixed inconsistent use of DV in jsbn.js.
</dd><dt><b>Version 1.3 (7/3/2012):</b></dt>
<dd>Fixed bug when comparing negative integers of different
word lengths.
</dd><dt><b>Version 1.2 (3/29/2011):</b></dt>
<dd>Added <code>square</code> method to improve ECC performance.
</dd><dd>Use randomized bases in <code>isProbablePrime</code>
</dd><dt><b>Version 1.1 (9/15/2009):</b></dt>
<dd>Added support for utf-8 encoding of non-ASCII characters
when PKCS1 encoding and decoding JavaScript strings.
</dd><dd>Fixed bug when creating a new BigInteger("0") in a non power-of-2 =
radix.
</dd></dl>

<h2>Licensing</h2>

<code>jsbn</code> is released under a BSD license.
See <a href=3D"http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE"><code=
>LICENSE</code></a> for details.

    <hr>
    <address><a href=3D"mailto:tjw@cs.stanford.edu">Tom Wu</a></address>
<!-- Created: Sat Dec 10 17:37:00 PST 2005 -->
<!-- hhmts start -->
Last modified: Tue Sep 15 23:30:00 PST 2009
<!-- hhmts end -->
 =20

</body></html>
------MultipartBoundary--Nyj5WoGFhexWctucWmd8K33NCU2AEQXWEtKl860din------
