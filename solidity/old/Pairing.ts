/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from "./typechain-runtime";

export class Pairing extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "message", type: "string" },
          { indexed: false, name: "opCode", type: "uint256" },
          { indexed: false, name: "postSuccess", type: "bool" }
        ],
        name: "PrecompiledCall",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Pairing> {
    const contract = new Pairing(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public PrecompiledCallEvent(eventFilter: {}): DeferredEventWrapper<
    { message: string; opCode: BigNumber | number; postSuccess: boolean },
    {}
  > {
    return new DeferredEventWrapper<
      { message: string; opCode: BigNumber | number; postSuccess: boolean },
      {}
    >(this, "PrecompiledCall", eventFilter);
  }
}
