/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import {BigNumber} from 'bignumber.js';
import {
   DeferredEventWrapper, DeferredTransactionWrapper, IPayableTxParams, ITxParams, promisify,
   TypeChainContract
} from './typechain-runtime';

export class Verifier extends TypeChainContract
{
   public readonly rawWeb3Contract: any;

   public constructor(web3: any, address: string | BigNumber)
   {
      const abi = [
         {
            anonymous: false,
            inputs: [
               {
                  indexed: false,
                  name: 'message',
                  type: 'string'
               }
            ],
            name: 'Verified',
            type: 'event'
         },
         {
            constant: false,
            inputs: [
               {
                  name: 'a',
                  type: 'uint256[2]'
               },
               {
                  name: 'a_p',
                  type: 'uint256[2]'
               },
               {
                  name: 'b',
                  type: 'uint256[2][2]'
               },
               {
                  name: 'b_p',
                  type: 'uint256[2]'
               },
               {
                  name: 'c',
                  type: 'uint256[2]'
               },
               {
                  name: 'c_p',
                  type: 'uint256[2]'
               },
               {
                  name: 'h',
                  type: 'uint256[2]'
               },
               {
                  name: 'k',
                  type: 'uint256[2]'
               },
               {
                  name: 'input',
                  type: 'uint256[3]'
               }
            ],
            name: 'verifyTx',
            outputs: [
               {
                  name: 'r',
                  type: 'bool'
               }
            ],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'function'
         }
      ];
      super(web3, address, abi);
   }

   static async createAndValidate(
     web3: any,
     address: string | BigNumber
   ): Promise<Verifier>
   {
      const contract = new Verifier(web3, address);
      const code = await promisify(web3.eth.getCode, [address]);

      // in case of missing smart contract, code can be equal to "0x0" or "0x" depending on exact web3
      // implementation to cover all these cases we just check against the source code length — there
      // won't be any meaningful EVM program in less then 3 chars
      if (code.length < 4) {
         throw new Error(`Contract at ${address} doesn't exist!`);
      }
      return contract;
   }

   public verifyTx(
     a: BigNumber[],
     a_p: BigNumber[],
     b: BigNumber[][],
     b_p: BigNumber[],
     c: BigNumber[],
     c_p: BigNumber[],
     h: BigNumber[],
     k: BigNumber[],
     input: BigNumber[]
   ): DeferredTransactionWrapper<ITxParams>
   {
      return new DeferredTransactionWrapper<ITxParams>(this, 'verifyTx', [
         a.map(val => val.toString()),
         a_p.map(val => val.toString()),
         b.map(val => val.toString()),
         b_p.map(val => val.toString()),
         c.map(val => val.toString()),
         c_p.map(val => val.toString()),
         h.map(val => val.toString()),
         k.map(val => val.toString()),
         input.map(val => val.toString())
      ]);
   }

   public VerifiedEvent(eventFilter: {}): DeferredEventWrapper<{ message: string },
     {}>
   {
      return new DeferredEventWrapper<{ message: string }, {}>(
        this,
        'Verified',
        eventFilter
      );
   }
}
