import {SchedulerAction, SchedulerLike, Subscription, SubscriptionLike} from 'rxjs';
import {chan, close, Chan, CLOSED, go, put, repeatTake, take} from 'medium';
import {Transducer} from 'transducers-js';
import {inject, tagged} from 'inversify';
import {AsyncSink} from 'ix';

import {DI_COMMON_TAGS} from '@jchptf/di-app-registry';
import {IAutoIterate} from './interfaces/auto-iterate.interface';
import {LIB_DI_TYPES} from './di/types';

export class AutoIterate implements IAutoIterate {
   constructor(
      @inject(LIB_DI_TYPES.RxjsScheduler)
      @tagged(DI_COMMON_TAGS.VariantFor, LIB_DI_TYPES.AutoIterate)
      private readonly scheduler: SchedulerLike) { }

   public run<T>(source: Iterable<T>, sink: AsyncSink<T>, delay: number = 0): SubscriptionLike
   {
      const sourceIter: Iterator<T> = source[Symbol.iterator]();
      // const sinkDirector: IDirector<T> = asFunction(sink);

      return this.scheduler.schedule<Iterator<T>>(
         function (this: SchedulerAction<Iterator<T>>, state?: Iterator<T>): void {
            const iterResult = state!.next();
            if (! iterResult.done) {
               sink.write(iterResult.value);
               this.schedule(state, delay);
            } else {
               sink.end();
            }
         }, delay, sourceIter
      )
   }

   public cycle<T>(source: Iterable<T>, sink: AsyncSink<T>, delay: number = 0): SubscriptionLike
   {
      const sourceIter: Iterator<T> = source[Symbol.iterator]();

      return this.scheduler.schedule<Iterator<T>>(
         function (this: SchedulerAction<Iterator<T>>, state?: Iterator<T>): void {
            const iterResult = state!.next();
            if (! iterResult.done) {
               sink.write(iterResult.value);

               this.schedule(state, delay);
            } else {
               this.schedule(source[Symbol.iterator](), delay)
            }
         }, delay, sourceIter
      )
   }

   // private static readonly CLOSED: symbol = Symbol.for('closed');

   public unwind<T>(master: AsyncSink<Iterable<T>>, sink: AsyncSink<T>, delay: number = 0): SubscriptionLike
   {
      const sources: Chan<Iterator<T>> = chan<Iterator<T>>();
      const items: Chan<T> = chan<T>();

      go(async function() {
         for await (let nextIterable of master) {
            await put(sources, nextIterable[Symbol.iterator]());
         }
         console.log('Closed!!');
      }).then(console.log.bind(console))
         .catch(console.error.bind(console));

      repeatTake(sources, async (nextIterator: Iterator<T>) => {
         let nextIterResult: IteratorResult<T> = nextIterator.next();
         if (! nextIterResult.done) {
            await put(items, nextIterResult.value);
            await put(sources, nextIterator);
         }
      }).then(console.log.bind(console))
         .catch(console.error.bind(console));

      const retVal: Subscription = this.scheduler.schedule<Chan<T>>(
         function (this: SchedulerAction<Chan<T>>, state?: Chan<T>): void {
            take(state!).then(
               (value: T|CLOSED) => {
                  if (value !== CLOSED) {
                     sink.write(value as T);
                     this.schedule(state, delay);
                  }
               }
            ).catch(console.error.bind(console));
         }, delay, items
      );

      retVal.add((): void => {
         close(sources);
         close(items)
      });

      return retVal;
   }

   public service<I, O>(source: Chan<any, I>, xducer: Transducer<I, O>, sink: Chan<O, any>,
      concurrency: number = 1): void
   {
      const txChan: Chan<I, O> = chan<I, O>(undefined, xducer);
      for (let ii = 0; ii < concurrency; ii++) {
         repeatTake(source, async (value: I) => {
            await put(txChan, value);
         });
         repeatTake(txChan, async (value: O) => {
            await put(sink, value);
         });
      }
   }

   public serviceMany<I, O>(source: Chan<any, I>, xducer: Transducer<I, O[]>, sink: Chan<O, any>,
      concurrency: number = 1): void
   {
      const txChan: Chan<I, O[]> = chan<I, O[]>(undefined, xducer);
      for (let ii = 0; ii < concurrency; ii++) {
         repeatTake(source, async (value: I) => {
            await put(txChan, value);
         });
         repeatTake(txChan, async (value: O[]) => {
            for (let innerValue of value) {
               await put(sink, innerValue);
            }
         });
      }
   }
}