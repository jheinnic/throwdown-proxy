// @ts-ignore
import iota from "iota";
// @ts-ignore
import Topo from "topo";

interface SubtreeOptions { 
   group: number,
   after: number[],
   currentWidth?: number
}

export class RecursiveTopoFactory
{
   private factor = 1;
   private endIndex = 1;
   private rootIndex = 0;
   private workStack: Array<SubtreeOptions> = [];
   private topo = new Topo();

   public constructor(rootIndex: number, endIndex: number, subtreeDepth: number)
   {
      this.factor = Math.pow(2, subtreeDepth);
      this.endIndex = endIndex;
      this.rootIndex = rootIndex;
   }

   public run(): void
   {
      iota.set(this.factor - 1);
      let nextLeaves = new Array(this.factor);
      for (let ii = 0; ii < this.factor; ii++) {
         nextLeaves[ii] = iota();
      }

      let currentRoot = this.rootIndex;
      let currentWidth = 1;
      let firstNextLeaf = this.factor - 1;

      this.populateTopo(currentRoot, currentWidth, nextLeaves);

      while (this.workStack.length > 0) {
         const opts = this.workStack.pop();
         if (!!opts && !!opts.currentWidth) {
            if (opts.currentWidth > currentWidth) {
               // Observing a change in the expected width of the current layer means we have just stepped
               // from the last node at the previous depth to the first node at the next tier of depth.  If
               // we fail to adjust iota to account for the associated leap across a number of layers equal
               // to the subtree height we're using for decomposition, we would be iterating though the
               // first nodes of layer n+1 instead of n+d, where n is the previously correct leaf node layer
               // depth and d is the height of out subtree decomposition.
               currentWidth = opts.currentWidth;
               firstNextLeaf = ((firstNextLeaf + 1) * this.factor) - 1;
               iota.set(firstNextLeaf);

               // If we have reached the final layer of the tree and that tree did not split evenly into
               // the desired subtree depth, the baseline common-case iteration logic above will have
               // jumped beyond the end of the tree's storage region.  This solution needs code defining
               // how it will handle the deepest final layer as a special case, but until it does so,
               // chose to terminate prematurely instead of hacking something even more temporary than
               // what's currently in the pipeline.  Check the assertion here since we can only reach the
               // point of overflow at the same point where we hop from one layer to the next deepest
               // option.
               if (firstNextLeaf > this.endIndex) {
                  console.error(
                     'Aborting at transition to partial node layer, which is still TBD for handling');

                  break;
               }
            }

            this.populateTopo(opts.group, opts.currentWidth, nextLeaves.map(iota));
         }
      }

      console.log(this.topo.nodes());
      console.log(JSON.stringify(this.topo.nodes()));
   }

   populateTopo( currentRoot: number, currentWidth: number, nextLeaves: number[]): void {
      console.log(`Call to populateTopo(${currentRoot}, ${currentWidth}, ${nextLeaves})`);

      const loopTerminal = Math.min(currentRoot + currentWidth, this.endIndex);
      for (; currentRoot < loopTerminal; currentRoot++) {
        const opts: SubtreeOptions = {
           group: currentRoot,
           after: nextLeaves.map(iota)
        };
        this.topo.add(currentRoot, opts);

        opts.currentWidth = currentWidth * this.factor;
        this.workStack.push(opts);
      }
   }
}

let test = new RecursiveTopoFactory(0, 500000, 4);
test.run();

