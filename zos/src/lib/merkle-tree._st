import {bufferToHex, setLengthRight, sha3, toBuffer} from 'ethereumjs-util';

export type CombineHashes = (left: Buffer, right: Buffer) => Buffer
export type MapToHash = (element: any) => Buffer

const defaultCombineFunction: CombineHashes = sha3;
const defaultMapToHashFunction: MapToHash = (element: any) => {
   return element as Buffer;
}

function sha3(left: Buffer, right: Buffer)
{
   return sha3(Buffer.concat([left, right]));
}

export interface MerkleTreeOptions<Element = Buffer>
{
   readonly elements: Buffer[],
   readonly combineHashes?: CombineHashes,
   readonly elementToHash?: MapToHash
}

export class MerkleTree<Element = Buffer>
{
   private elements: Buffer[];

   private combineHashes: CombineHashes;

   constructor(options: MerkleTreeOptions<Element>)
   {
      this.combineHashes = options.combineHashes || defaultCombineFunction;
      this.elementToHash = options.elementToHash;

      // Deduplicate elements
      // this.elements = this.bufDedup(this.elements);

      // Sort elements
      // this.elements.sort(Buffer.compare);

      // Filter empty strings and hash elements
      this.elements = elements.map(this.elementToHash)
        .filter((el: any) => (el && (el.length() > 0)));

      // Create layers
      this.layers = this.getLayers(this.elements);
   }

   getLayers(elements)
   {
      if (elements.length === 0) {
         return [['']];
      }

      const layers = [];
      layers.push(elements);

      // Get next layer until we reach the root
      while (layers[layers.length - 1].length > 1) {
         layers.push(this.getNextLayer(layers[layers.length - 1]));
      }

      return layers;
   }

   getNextLayer(elements)
   {
      return elements.reduce((layer, el, idx, arr) => {
         if (idx % 2 === 0) {
            // Hash the current element with its pair element
            layer.push(this.combinedHash(el, arr[idx + 1]));
         }

         return layer;
      }, []);
   }

   // combinedHash(first: any, second: any)
   // {
   //    if (!first) { return second; }
   //    if (!second) { return first; }
   //
   //    return sha3(this.sortAndConcat(first, second));
   // }

   getRoot()
   {
      return this.layers[this.layers.length - 1][0];
   }

   getHexRoot()
   {
      return bufferToHex(this.getRoot());
   }

   getProof(el, prefix)
   {
      let idx = this.bufIndexOf(el, this.elements);

      if (idx === -1) {
         throw new Error('Element does not exist in Merkle tree');
      }

      let proof = this.layers.reduce((proof, layer) => {
         const pairElement = this.getPairElement(idx, layer);

         if (pairElement) {
            proof.push(pairElement);
         }

         idx = Math.floor(idx / 2);

         return proof;
      }, []);

      if (prefix) {
         if (!Array.isArray(prefix)) {
            prefix = [prefix];
         }
         prefix = prefix.map(item => setLengthRight(toBuffer(item), 32));
         proof = prefix.concat(proof);
      }

      return proof;
   }

   getHexProof(el, prefix)
   {
      const proof = this.getProof(el, prefix);

      return this.bufArrToHex(proof);
   }

   getPairElement(idx, layer)
   {
      const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;

      if (pairIdx < layer.length) {
         return layer[pairIdx];
      } else {
         return null;
      }
   }

   bufIndexOf(el: Element | Buffer, arr: Buffer[])
   {
      let hash: Buffer;

      // Convert element to 32 byte hash if it is not one already
      if (el instanceof Element) {
         hash = this.hashFromElement(el);
      } else {
         hash = el;
      }

      for (let i = 0; i < arr.length; i++) {
         if (hash.equals(arr[i])) {
            return i;
         }
      }

      return -1;
   }

   bufDedup(elements: Buffer[])
   {
      return elements.filter((el, idx) => {
         return this.bufIndexOf(el, elements) === idx;
      });
   }

   bufArrToHex(arr: Buffer[])
   {
      if (arr.some(el => !Buffer.isBuffer(el))) {
         throw new Error('Array is not an array of buffers');
      }

      return '0x' + arr.map(el => el.toString('hex'))
        .join('');
   }

   sortAndConcat(...args: Buffer[])
   {
      return Buffer.concat([...args].sort(Buffer.compare));
   }
}
